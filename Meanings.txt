



// dependency injection can be achieved through IOC and IOC says that a framework such as spring will provide dependencies required
so that the user need not worry about creating those dependencies or objects

IOC COntainer usually is responsible for creating configuring and managing the bean lifecycle once created the beans can be stored in
either the beanfactory or application context

Bean Factory            vs     Application Context

BeanFactory - provides lazy initialization of beans means once when there is a request to create a bean of a class it will create spring bean
Application Context - Eager Initializtion of beans will be done by this meaning as soon as the applicaton starts up the spring framework
will store the beans in application context. also, Application context extends the BeanFactory hence, all the features supported by the
BeanFactory will be inherited by Application Context also internalization and some advance features of spring framework will be
supported by the Application Context.

usually a pojo like can be considered as a java bean but it also follows some design patterns, they will be used in frameworks such as spring


so basically a normal bean can be consider as an object hence, in configuration class we can have multiple objects but if the
@Bean will be kept on top of pojo then class cant be an object and wont be making sense

@Bean usually tells spring that u are defining an object. and that can be inside a configuration class

    explain bean lifecycle properly -
    bean insantiation - bean will be loaded to application context
    dependancy njection - all dependencies of the instantiated bean will be loaded and linked
    @PostConstruct and @init - these annotations in instantiated bean will be invoked they will be invoked only if bean has them
    ready phase - bean will be ready to use
    @PreDestroy - the annotation will be invoked just before removing bean from application context.

    What are the different ways to configure Spring applications?**
    xml base,
    annotation base
    xml base + annotation base
    Component Scanning

    explain spring mvc of architecture
    so first request from frontend reaches dispatcher servlet,
    that will just identify the controller that handles request and sends the name of that to handler mapping,
    then when controller will be reached by handler mapping then that controller will take care of identifying the method that can handle request
    then request will be routed there
    after request will be routed there then in function definition there will be a Model object
    so return that object by setting values
        model.addAttribute("person", new Person());
    then return a view
        return "Person.html"
    then thyemeleaf or some frontend framework can handle that returned model or response
        'name - ' +${person.name}
        'sex - ' +${person.sex}


example5 - @Component is a stereotype annotation and if we keep that on top of POJO then that will also create bean of that POJO to the spring context

example5_1111 - if u want to make sure multiple objects of same type have to be created then create subclasses of that main class
hence, u will be able to create multiple beans using @Component without defining in @Configuration

example6 - @Predestroy - add the annotation ontop of any method that has to be executed before removing the bean from the spring application context
 @PostConstrcut - add the annotation on top of an method so that some functionality can be just invoke after creation of bean

How to create an Object of ApplicationContext -
var context = new AnnotationConfigApplicationContext(Configuration.class);

example7 - context.registerBean() allows u to create bean dynamically

example8 - to use a context with beans created from XML file
use -

var context = new ClassPathXmlApplicationContext("beans.xml");

16. **What is Spring Boot, and what are its key features?**
    springboot is framework part of spring frameworkthat is open source and provides some key benefits such as -

    auto configuration - db connectionvity will be autoconfigured based on application.properties
    embeded server - server such as jetty or tomcat are provided automatically
    embeded database - db such as H2 are easily usable for robust development and testing
    spring boot actuator - provides health metrics of application


    reduces XML base configuration for beans - beans can be configured directly based on stereotype annotations by spring boot


20. **What is Spring Boot Starter?**

    spring boot starter is a pre-configured set of dependencies provided by spring boot that makes quick development of application
    ex -

    spring-boot-starter-web: For developing web applications.
    spring-boot-starter-data-jpa: For data access with JPA.
    spring-boot-starter-security: For adding security features.
    spring-boot-starter-actuator: For production monitoring and management.




Q- what are the real differences or advantages spring boot gives over spring framework
1- configuring beans - in native spring they have to be configured in XML file or they can be created using stereotype annoations but problem
    really is that there has to be explicit @componentscanning done to create bean but spring boot automatically does that

2- spring boot reduces so much of boiler plate code by creating autoconfiguration based on application.properties where as spring has no
    autoconfiguration support hence programmer manually has to create configuration classes

    spring boot has feature of suppoorting an in-memory database

    spring boot provides actuator support to monitor health of webserver

    spring boot providesa built in web-server such as jetty or tomcat

    spring boot takes care of handling dependencies once starter project are properly mentioned in pom.xml else we have to manually
    import all of those specific packages required to run webapplication.

Q- Actuator -

Stereotype annotations - by default any stereotype annotation will be created with singletone scope means there will be only one instance
and that will be shared across

@Controller vs the @RestController - with @Controller we usually just need to send response as JSON after manually converting object to json
but with the @RestController there wont be any need to manually convert object to json as that conversion happens in spring automatically

there is a small difference, @Controller will be enerally used to return HTML web pages
where as the annotation @RestController will take care of returning JSON objects.

ModelAndView object can help @Controller APIs to convert a object to JSON before sending resp
@RestController uses the Jackson Library to convert an object to JSON before sending response to the frontend

Lombock framework has an annotation -
@Data - keep that on top of pojo so that u can use getters and setters without explicitly defining them

@Slf4j - keep that on top of any class so that u can just use log.info("") and directly debug without explicitly creating an object for log4j

@RequestParam - keep that on a controller api so that u can pass the value like - /home?param1=value&param2=value2

@PathVariable - that will be part of URI eg - /home/{pathVariable1}/{pathVariable2} - not helpful when there will be specialcharacters usually better to use RequestParam

spring-boot-starter-validaton provides annotation such as -
@NotBlank - useful to say that the field cant be empty

@Size - accepts arguments such as min, max

@Lazy will be making sure that whenever bean will be refer whenever there will be requirement to create that bean in context for example - > if repository is autowired to service then only the repo

will be initialized

whereas

@Eager - will be making sure all beans with that annotation will be loaded to context at startup of application

also @Lazy will improve the startup time of application, @Eager will make sure the application is seamless after startup but has low startup time

@SpringBootApplication will be splitted into 3 componenets - @EnableAutoConfiguration, @ComponentScan, @Configuration
@EnableAutoConfiguration - that will be useful to autoconfigure properties from the file - application.properties and auto configures them

reducing the boiler plate code to create dependencies such as datasource connections.
enableautoconfiguration also creates embedded serverver such as Jetty or tomcat automatically which will be very difficult to create manually without springboot

@ComponentScan -that will usually identify all beans such as @Component, @Service, @Controller, @Repository and other custom stereotype annotation

@Valid will trigger spring then say that look for the pojo and validate the request sent by frontend before reaching the controller
though u have to proper validations inside pojo using annotations from jakarta library such as - @NotBlank or @digits

@Scope("request") - that scope makes sure that for every incoming HTTP request there will be a new bean created.
that scope makes sure that for each and every new HTTP request or rest call trigger there will be new bean create

@Scope("session") - that scope will just maintain one bean per session ex - from login to logout of session there will be only one bean in context

so because of that there will be more consistency and these beans will be suitable for transaction related operations.

@Scope("application") - only one bean will be created in entire context of that type unless a new bean will be manually created
context.getBean() // if that will be called n times, there will be only one bean for all


@Transactional - the annotation can be applied on top of a method or class
when applied that makes sure that any particular operation's trnascations related to that method or class annotated with @transactional

will be rollback whenever a current transaction fails ensuring consistency

also

@Transactional(rolbackFor = NullPointerException)
that makes sure that only if a null pointer exception occur transactions will be roll back.

@Entity will just tell to spring to map a class as table in db, u have to use a annotation @table(name = "tablename") if ur table name not same as pojo name
also @Entiry will create table if not present in db

@Column - on top of a field that can be used if u want to use differnt name for field in table compared to pojo field name.

@Transient - transient has to be kept on top of variable and once kept spring makes sure that variable will not be stored in db

Rowmapper is genrally like used to take result table from db resp and then map to collection?

SpringJdbcTemplate - that was introuduced by spring so that most of boilerplate code such as creating / closing connections can be handled by spring
ex -

insertPost(Post post){
    public final JdbcTemplate jdbcTemplate;
    String query = ""insert into contact_msg (name,mobile_num) values (?,?)";"
    jdbcTemplate.update(query, post.getname(), post.getMobile_num());
}

Spring JPA - u just define interface extending JPARepository<Pojo, primaryKeyType>
ex -

@Repository
public interface PublicRepo extends JpaRepository<Product, Long>{
    public Product findProductById(long id);
}

@Service
class Service{
    @Autowired
    protected PublicRepo publicRepo;

    // call findProductById()
}

joins with the spring JPA - Customer and the Orders




Customer.java
@Entity
public class Customer {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "customer_id")
    private Long id;
    private String customerName;

    @ManyToMany
    @JoinTable(
        name = "customer_order",
        joinColumns = @JoinColumn(name="customer_id"),
        inverseJoinColumns = @JoinColumn(name = "order_id")
    )
    public Set<Order> orders;
}

Order.java
@Entity
public class Order {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;
    private String orderDate;

    @ManyToMany
    public Set<Customer> customers;
}

CustomerRepository.java
interface CustomerRepository extends JPARepository<Customer, Long>{
    Customer getById(Long customerId);
}

Service.java
    Customer customer = repo.getById(00000);
    return customer.getOrders();

Q- how do u create custom query using spring jpa

Repo.java {
    @Query(select attributeName from entityName where attributeName = :paramName)
    @Query(select name from User where address = :address)
    public String findNameByAddress(@Param("address") String addressName)
}

Q - What is Spring Data JPA, and how does it relate to JPA?
    JPA basically just is a specification and is implemented by hibernate and Spring data jpa

Q- Explain pagination of spring jpa properly
    so if there will be huge amount amount of data and frontend requests them in terms of page they send request for each page

    and each page could be of different size as per the frontend requirement so
    front end will make a request like  -    /users?page=0&size=5&sort=name

    Controller.java
    @GetMapping("/users")
    public Page<User> getUsers(@RequestParam(name = "page", defaultValue = "0") int pageNumber,
                               @RequestParam(name = "size", defaultValue = "10") int pageSize,
                               @RequestParam(name = "sort", defaultValue = "name") String sortBy) {
        Pageable peageable = PageRequest.sortOf(pageNumber, pageSize, Sort.by(sortBy));
        return userService.findAllUsers(pageable);
    }

    Service.java
    List<User> findAllUsers(Pageable pageable){
        userRepo.findAllUsers(pageable);
    }

    UserRepo extends PaginationAndSortingRepository<user, Long>{
        List<User> findAllusers(Peageable pageable);
    }

Q- what are the real dofferences of jpa repo and crud repo
JPARepo - that extends both CRUDRepo and PaginationAndSortingRepository so JPA repo prvides all CRUDRepo features
    JPARepo will have more fetures suchas deleting recorss in batch

    ex - deleteAllInBatch(List<User> users);

    Spring Provides some auditing features in JPARepo such as - ex - lastModifiedDate and that variable need to be populated by programmer
    Spring takes care of that automatically.



CRUDRepo - basic apis can be supported such as save, removeById(), findByID(), findAllById();


Q- explain some of basic audit features provided by spring jpa
in pojo we have to declare these 4 variables -

@Entity
@EntityListeners(AuditingEntityListener.class) // Enable auditing for this entity
public class User {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    private String username;

    @CreatedBy
    private String createdBy; // Will be populated with the username of the user who created the entity

    @LastModifiedBy
    private String lastModifiedBy; // Will be populated with the username of the user who last modified the entity

    @CreatedDate
    private LocalDateTime createdDate; // Will be populated with the creation date and time

    @LastModifiedDate
    private LocalDateTime lastModifiedDate; // Will be populated with the last modification date and time

    // Getters and setters
}


then while storing a new row or updating row such as -
 public User createUser(User user) {
        return userRepository.save(user); // createdBy and createdDate will be populated
    }

    public User updateUser(User user) {
        return userRepository.save(user); // lastModifiedBy and lastModifiedDate will be updated
    }

Spring takes care of populating those audit fields automatically though we wont provide value

Q- What are the different ways to define a custom method query in a Spring Data JPA repository interface?
1- Method Name:  List<User> findByLastName(String lastName);

2- @Query Annotation: @Query("SELECT u FROM User u WHERE u.firstName = :firstName")
List<User> findByFirstName(@Param("firstName") String firstName);

-    Named Query Reference:  @Query(name = "User.findByLastName")
List<User> findByLastName(@Param("lastName") String lastName);

4- Native Query: @Query(value = "SELECT * FROM users WHERE last_name = :lastName", nativeQuery = true)
List<User> findByLastName(@Param("lastName") String lastName);

q- there are many normal embeded servers provided by spring boot so how will u choose one
if u want to just use for simplicity then jetty will be better where as tomcat is a well established one so that will be used for performance and the scalability

Q- usually constructor base injection will be prefer over variable base why?
    because for the construtor base injection the spring has to have all required dependencies in context then only service bean will create
    but for that variable base injection if spring cant find bean of required dependencies then in runtime there will be nullPointerException

Q-    explain fow of that springapplication startup
1- Application context creation
2- AutoConfiguration classes loading - here springboot will lead all the required configuration classes
    -     AutoConfiguration Class execution

    -     componentscanning or the bean registration
    - bean creation
    - postconstruct
    - autowire
    - webserver initialization
    -    application ready







Scenario based -
In your Spring Boot application, you need to ensure that a series of database operations either all succeed or all fail (transactional behavior).
 How do you configure database transactions in Spring Boot, and what annotations or methods are involved?

ok we have to make sure that any database configuration class has @EnableTransactionalManagement annotation on top
then, any api that calls a repo has to be annotated with @Transactional

if u want only to rollback for specific Exceptions such as NullPointerExceptions then, annotation on the service api has to be like
@Transactional(rollbackFor = NulPointerException.class)

Scenario: Caching Strategy

Q- Your application retrieves frequently accessed data from a database, leading to performance issues.
What caching strategies would you consider, and how would you implement them using Spring Boot? Provide an example of caching configuration.


1 - inMemory caching - that can be done with springBoot support

on top of application class just add @EnableCaching

2- if u want to cache specific service calls only then -

on top of service api just add -
@Cacheable(value="myCache" key = "#id")
public getDataById(String id){

Q- how to support distributed caching ? -
1- get the pom of that distributed cache provider for ex - Redis

spring-boot-starter-data-redis

2- configure redis server details so that springboot application can talk to that
spring.redis.host = 127.0.0.1
spring.redis.port = 6379

-  add that @EnableCaching on top of your microservice or springBootapplication

- Annotate whatever apis that basically u want to be cached with @Cacheable in the service layer

-    start the redis server

-    start the microservice or ur springboot application.

how to handle exceptions in the spring boot applications
1- create a global exception class handler and then
2- define APIs to handle any specific exceptions in them

ex -
@ControllerAdvice
public class GlobalExceptionHandler{
    @ExceptionHandler(NullPointerException.class)
    public ResponseEntity<String> handleNullPointerException(NullPointerException e){
        return new ResponseEntity<>("there was a nullpointer exception at "e.getMessage());
    }
}

Q- imagine that there is H2 db configuration but u want to override that and create custom data source configuration so how u achieve that
1- well whatever will be there in application,properties supporting H2 can be ignored by -

just creating like a class of Data source configuration containin DB enpoints and connections then,
on top of that @SpringBootApplication(exclude = {DataSourceConfiguration.class})


Q- Database Transactions: Elaborate on different types of transaction isolation levels in Spring Boot.
     Discuss scenarios where each isolation level is appropriate and their impact on the database performance.

     1- Read Uncommitted (lowest level) - makes sure that a transaction may read data of another trnasaction that is yet to be committed
     Ex-

     @Service
    class UserService{
        @Transactional(isolation = Isolation.READ_UNCOMMITTED)
        public void readUncommitedTransaction(){

        }
    }

    2- Read Committed - a transaction can read data of another transaction only if committed

    @Transactional(isolation = Isolation.READ_COMMITTED)

Q- Advantages and the challenges of using Microservices with SpringBoot
   1- code will be decentralized so every microservice will have it's own functionality and each can be assigned to person to develop
    2- if u split application horizontally then u can scale also in future instead of scaling entire application or Monolith,

   u can just scale whatever microservice u want.

   Complexity -
   Communication between microservice and load balancing can be challenging in real time

Q- How spring will usually provide means to load balancing and communication between microservices.
communication between the microservices - use Naming server such as netflix Eureka which will take care of microservice discovery

Load balancing- Spring-cloud-starter will take care of that

Q- Distributed Caching: Explain the use of caching in distributed systems.
     How would you implement and manage caching in a microservices environment using Spring Boot?

step1 - create two beans of Redis and some other cache in Cache Manager class
step2 - autowire those relating cache beans and on top of service APIs call provide the 'cacheManager' = redis or whatever

@Configuration
@EnableCaching
class CacheConfig{
    @Bean
    public CacheManager redisCacheManager(){
        // configuration
    }

    @Bean
    public CacheManager guavaCacheManager(){
        // configuration
    }
}

@Service
class YourService{
    private CacheManager redisCacheManager;
    private CacheManager guavaCacheManager;

    private PersonJPARepository personJpaRepo;
    public YourService(@Autowired CacheManager redis, @Autowired CacheManager guava){
        this.redisCacheManager = redis;
        this.guavaCacheManager = guava;
    }

    public YourService(@Autowired PersonJPARepository personJpaRepo){
        this.personJpaRepo = personJpaRepo;
    }

    @Cacheable(cacheManager = "redisCacheManager", value = "Products", key = "#id")
    public String getDatabyId(String id) {
        return personJpaRepo.getDataById(id);
    }

    @Cacheable(cacheManager = "redisCacheManager", value = "Products", key = "#name")
    public String getDataByName(String name) {
        return personJpaRepo.getDataByName(name);
    }



}

what are the profiles in Spring-Boot and explain how to use them
Profiles are just proper way to switch between multiple environments accoring to our need

ex - if application can be run in h2 db at Develpment but MongoDb will be used during Deployment then,
what can be realy used is - create two application properties

1- application.development.properties
2- application.deployment.properties

then switch between them whenever required in application.properties file with the following key
spring.profiles.active = deployment

if configurations will be present in java files then how to switch between them

1- create ann interface for base configuration
2- implement both under that configuration and then just switch to whatever required using @Primary annotation.

Q- how to load properties of application.propeties in java configuration file
Application.properties -

application.message = "here"

Configuration.java

@Configuration
@ConfigurationProperties(prefix = "application")
class AppCOnfig{
    private String message;
}

// message will return then - here


Q if there will be an annotation setting used at class leveland method level then method level will have more preference or class
A- Method level



Q- what is the difference between singleton in java and singleton in spring
so the gang of four singleton is typical java singleton pattern that provides single instance in entire application of the runtime where as singleton in the spring makes sure that there will be one bean or instance of that class per applicatio context and there can be many application contexts in single application


